apiVersion: v1
kind: Template
labels:
  app: fedora-coreos
  template: fedora-coreos-template
metadata:
  annotations:
    description: |-
      Jenkins pipeline for Fedora CoreOS.
    iconClass: icon-jenkins
    openshift.io/display-name: Fedora CoreOS Pipeline
    openshift.io/documentation-url: https://github.com/coreos/fedora-coreos-pipeline
    openshift.io/support-url: https://github.com/coreos/fedora-coreos-pipeline
    openshift.io/provider-display-name: Fedora CoreOS
    tags: fcos,jenkins,fedora
  name: fedora-coreos
parameters:
  - description: Git source URI for pipeline Jenkinsfile
    name: PIPELINE_REPO_URL
    value: https://github.com/coreos/fedora-coreos-pipeline
  - description: Git branch/tag reference for pipeline Jenkinsfile
    name: PIPELINE_REPO_REF
    value: master
  - description: Prefix to prepend to resources
    name: DEVELOPER_PREFIX
    value:
  - description: Git source URI for FCOS config
    name: PIPELINE_FCOS_CONFIG_URL
    value: https://github.com/coreos/fedora-coreos-config
  - description: Git branch/tag reference for FCOS config
    name: PIPELINE_FCOS_CONFIG_REF
    value: # empty -> based on stream
  - description: Size of the PVC to create
    name: PVC_SIZE
    value: 100Gi
  - description: Image of coreos-assembler to use
    name: COREOS_ASSEMBLER_IMAGE
    # for now we just follow :master, but we may start freezing if things become
    # too unstable
    value: quay.io/coreos-assembler/coreos-assembler:master
  - description: AWS S3 bucket in which to store builds (or blank for none)
    name: S3_BUCKET
    value: fcos-builds
  - description: Whether to use KVM device plugin or legacy OCI KVM hook
    name: KVM_SELECTOR
    value: kvm-device-plugin
  - description: Slack domain on which to post build status updates
    name: SLACK_DOMAIN
    value: coreos
  - description: Slack channel on which to post build status updates
    name: SLACK_CHANNEL
    value: jenkins-coreos

objects:

  ### JENKINS MASTER ###

  # use our own "gated" imagestream for the Jenkins master so we can test new
  # images before upgrading
  - apiVersion: v1
    kind: ImageStream
    metadata:
      name: jenkins-s2i
      annotations:
        coreos.com/deploy-default: "true"
    spec:
      tags:
        - name: stable
          from:
            kind: DockerImage
            # 2.176.3
            name: docker.io/openshift/jenkins-2-centos7@sha256:967da7e00e984cb7a474dfc95680982783f282cd8dfbed4189c4478deced1083
  - apiVersion: v1
    kind: ImageStream
    metadata:
      name: jenkins
      annotations:
        coreos.com/deploy-default: "true"
  - kind: BuildConfig
    apiVersion: v1
    metadata:
      name: fedora-coreos-jenkins
      annotations:
        coreos.com/deploy-default: "true"
    # Note no triggers: we don't want e.g. git pushes/config changes to restart
    # Jenkins. Let's just require manual restarts here. XXX: Should investigate
    # if there's an easy way to auto-redeploy during downtimes.
    spec:
      source:
        type: Git
        git:
          uri: ${PIPELINE_REPO_URL}
          ref: ${PIPELINE_REPO_REF}
        contextDir: jenkins/master
      strategy:
        type: Source
        sourceStrategy:
          from:
            kind: ImageStreamTag
            name: jenkins-s2i:stable
          forcePull: true
      output:
        to:
          kind: ImageStreamTag
          name: jenkins:2
      successfulBuildsHistoryLimit: 2
      failedBuildsHistoryLimit: 2

  ### JENKINS SLAVE ###

  # keep a local copy of the Jenkins slave image so we're not constantly pulling
  # it each time from docker.io
  - apiVersion: v1
    kind: ImageStream
    metadata:
      name: jenkins-slave-base-centos7
      annotations:
        coreos.com/deploy-default: "true"
    spec:
      lookupPolicy:
        # this allows e.g. the pipeline to directly reference the imagestream
        local: true
      tags:
        - name: latest
          from:
            kind: DockerImage
            # target :latest for now
            name: docker.io/openshift/jenkins-slave-base-centos7:latest
          importPolicy:
            scheduled: true

  ### JENKINS CONFIGURATION ###

  # this uses the configuration-as-code plugin:
  # https://github.com/jenkinsci/configuration-as-code-plugin
  - apiVersion: v1
    kind: ConfigMap
    metadata:
      name: jenkins-casc-cfg
      annotations:
        coreos.com/deploy-default: "true"
    data:
      jenkins.yaml: |
          credentials:
            system:
              domainCredentials:
                - credentials:
                  - string:
                      scope: GLOBAL
                      id: slack-token
                      secret: ${slack-api-token/token}
                      description: Slack API token
          unclassified:
            slackNotifier:
              teamDomain: ${SLACK_DOMAIN}
              tokenCredentialId: slack-token
              room: "#${SLACK_CHANNEL}"

  ### COREOS-ASSEMBLER ###

  # keep a local copy of coreos-assembler so we're not constantly pulling it
  # each time from quay.io
  - apiVersion: v1
    kind: ImageStream
    metadata:
      name: ${DEVELOPER_PREFIX}coreos-assembler
      annotations:
        coreos.com/deploy-default: "true"
    spec:
      lookupPolicy:
        # this allows e.g. the pipeline to directly reference the imagestream
        local: true
      tags:
        - name: master
          from:
            kind: DockerImage
            name: ${COREOS_ASSEMBLER_IMAGE}
          importPolicy:
            scheduled: true

  ### PVC ###

  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: coreos-assembler-claim2
      annotations:
        coreos.com/deploy-default: "true"
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: ${PVC_SIZE}

  ### FEDORA COREOS BUILD PIPELINE ###

  - kind: BuildConfig
    apiVersion: "build.openshift.io/v1"
    metadata:
      name: ${DEVELOPER_PREFIX}fedora-coreos-pipeline
      # We use annotations as a way to pass information from the bc (and thus
      # from `oc new-app/process` time) to the Groovy code. This allows us to
      # centralize all the major knobs in this file for easier management.
      # Could also use `oc start-build -e FOO=BAR` for this, but we'd still need
      # to redefine the bc for setting the right repo to the pipeline itself.
      # https://docs.okd.io/latest/dev_guide/builds/build_strategies.html#mapping-buildconfig-jenkins
      annotations:
        coreos.com/deploy-default: "true"
        coreos.com/source-config-url: ${PIPELINE_FCOS_CONFIG_URL}
        coreos.com/source-config-ref: ${PIPELINE_FCOS_CONFIG_REF}
        coreos.com/developer-prefix: ${DEVELOPER_PREFIX}
        coreos.com/s3-bucket: ${S3_BUCKET}
        coreos.com/kvm-selector: ${KVM_SELECTOR}
    spec:
      # note no triggers: the base pipeline is only ever triggered manually, or
      # by one of the stream-specific pipelines
      source:
        type: Git
        git:
          uri: ${PIPELINE_REPO_URL}
          ref: ${PIPELINE_REPO_REF}
      runPolicy: Parallel
      strategy:
        jenkinsPipelineStrategy:
          type: JenkinsPipeline
          jenkinsfilePath: Jenkinsfile

  ### FEDORA COREOS BUILD PROD PIPELINE ###

  - kind: BuildConfig
    apiVersion: "build.openshift.io/v1"
    metadata:
      name: fedora-coreos-pipeline-production
      annotations:
        coreos.com/deploy-default: "false"
    spec:
      # note no triggers: the prod pipeline is only ever triggered by GitHub
      # pushes to one of the prod branches
      source:
        type: Git
        git:
          uri: ${PIPELINE_REPO_URL}
          ref: ${PIPELINE_REPO_REF}
      strategy:
        jenkinsPipelineStrategy:
          type: JenkinsPipeline
          jenkinsfilePath: Jenkinsfile.production

  ### FEDORA COREOS BUILD DEVEL PIPELINE ###

  - kind: BuildConfig
    apiVersion: "build.openshift.io/v1"
    metadata:
      name: fedora-coreos-pipeline-development
      annotations:
        coreos.com/deploy-default: "false"
    spec:
      triggers:
      - type: ConfigChange
      - type: imageChange
        imageChange:
          from:
            kind: ImageStreamTag
            name: coreos-assembler:master
      source:
        type: Git
        git:
          uri: ${PIPELINE_REPO_URL}
          ref: ${PIPELINE_REPO_REF}
      strategy:
        jenkinsPipelineStrategy:
          type: JenkinsPipeline
          jenkinsfilePath: Jenkinsfile.development

  ### FEDORA COREOS BUILD MECHANICAL PIPELINE ###

  - kind: BuildConfig
    apiVersion: "build.openshift.io/v1"
    metadata:
      name: fedora-coreos-pipeline-mechanical
      annotations:
        coreos.com/deploy-default: "false"
    spec:
      triggers:
      - type: ConfigChange
      # for fedmsg-based triggers
      # use `oc set triggers --from-webhook` to update token to be unique
      - type: Generic
        generic:
          secret: regenerate
      - type: imageChange
        imageChange:
          from:
            kind: ImageStreamTag
            name: coreos-assembler:master
      source:
        type: Git
        git:
          uri: ${PIPELINE_REPO_URL}
          ref: ${PIPELINE_REPO_REF}
      strategy:
        jenkinsPipelineStrategy:
          type: JenkinsPipeline
          jenkinsfilePath: Jenkinsfile.mechanical

  ### FEDORA COREOS RELEASE PIPELINE ###

  - kind: BuildConfig
    apiVersion: "build.openshift.io/v1"
    metadata:
      name: fedora-coreos-pipeline-release
      annotations:
        coreos.com/deploy-default: "false"
        coreos.com/s3-bucket: ${S3_BUCKET}
    spec:
      source:
        type: Git
        git:
          uri: ${PIPELINE_REPO_URL}
          ref: ${PIPELINE_REPO_REF}
      strategy:
        jenkinsPipelineStrategy:
          type: JenkinsPipeline
          jenkinsfilePath: Jenkinsfile.release
      runPolicy: Parallel

  ### FEDORA COREOS STREAM PIPELINE ###

  - kind: BuildConfig
    apiVersion: "build.openshift.io/v1"
    metadata:
      name: fedora-coreos-pipeline-stream-metadata-generator
      annotations:
        coreos.com/deploy-default: "false"
    spec:
      triggers:
      - type: Generic
        generic:
          secret: regenerate
      source:
        type: Git
        git:
          uri: ${PIPELINE_REPO_URL}
          ref: ${PIPELINE_REPO_REF}
      strategy:
        jenkinsPipelineStrategy:
          type: JenkinsPipeline
          jenkinsfilePath: Jenkinsfile.stream.metadata.generator

  ### FEDORA COREOS TEST PIPELINES ###

  - kind: BuildConfig
    apiVersion: "build.openshift.io/v1"
    metadata:
      name: fedora-coreos-pipeline-kola-aws
      annotations:
        coreos.com/deploy-default: "false"
    spec:
      source:
        type: Git
        git:
          uri: ${PIPELINE_REPO_URL}
          ref: ${PIPELINE_REPO_REF}
      strategy:
        jenkinsPipelineStrategy:
          type: JenkinsPipeline
          jenkinsfilePath: Jenkinsfile.kola.aws
