def utils, streams
node {
    checkout scm
    utils = load("utils.groovy")
    streams = load("streams.groovy")
    pod = readFile(file: "manifests/pod.yaml")
}

properties([
    pipelineTriggers([]),
    parameters([
      string(name: 'STREAM',
             description: 'The Stream we are testing against',
             defaultValue: '',
             trim: true),
      string(name: 'VERSION',
             description: 'Fedora CoreOS Build ID to test',
             defaultValue: '',
             trim: true),
      string(name: 'S3_STREAM_DIR',
             description: 'Fedora CoreOS S3 Stream Directory',
             defaultValue: '',
             trim: true)
    ])
])

currentBuild.description = "[${params.STREAM}] - ${params.VERSION}"

// substitute the right COSA image into the pod definition before spawning it
pod = pod.replace("COREOS_ASSEMBLER_IMAGE", "coreos-assembler:master")

// shouldn't need more than 256Mi for this job
pod = pod.replace("COREOS_ASSEMBLER_MEMORY_REQUEST", "256Mi")

// use a unique label to force Kubernetes to provision a separate pod per run
def pod_label = "cosa-${UUID.randomUUID().toString()}"

podTemplate(cloud: 'openshift', label: pod_label, yaml: pod) {
    node(pod_label) { container('coreos-assembler') {
        def ami, ami_region
        def no_ami = false

        def meta_json
        stage('Fetch Metadata') {
            utils.shwrap("""
            export AWS_CONFIG_FILE=\${AWS_FCOS_BUILDS_BOT_CONFIG}
            coreos-assembler init https://github.com/coreos/fedora-coreos-config
            coreos-assembler buildprep --ostree s3://${params.S3_STREAM_DIR}/builds
            """)

            def basearch = utils.shwrap_capture("coreos-assembler basearch")
            meta_json = "builds/${params.VERSION}/${basearch}/meta.json"
            def meta = readJSON file: meta_json
            if (meta.amis.size() > 0) {
                ami = meta['amis'][0]['hvm']
                ami_region = meta['amis'][0]['name']
            } else {
                no_ami = true
            }
        }

        // fail immediately if the build contained no AMIs
        if (no_ami) {
          currentBuild.result = 'FAILURE'
          return
        }

        stage('Kola') {
            parallel aws: {
                stage('Kola:AWS') {
                  utils.shwrap("""
                  export AWS_CONFIG_FILE=\${AWS_FCOS_KOLA_BOT_CONFIG}
                  # use `cosa kola` here since it knows about blacklisted tests
                  cosa kola run -p aws --aws-ami ${ami} --aws-region ${ami_region} -b fcos -j 5 --no-test-exit-error
                  tar -cf - tmp/kola | xz -c9 > kola-run.tar.xz
                  """)
                  archiveArtifacts "kola-run.tar.xz"
                }
            },
            aws_upgrade: {
                stage('Kola:AWS upgrade') {
                    utils.shwrap("""
                    export AWS_CONFIG_FILE=\${AWS_FCOS_KOLA_BOT_CONFIG}
                    coreos-assembler kola --upgrades -p=aws --aws-region=${ami_region} --no-test-exit-error
                    tar -cf - tmp/kola-upgrade | xz -c9 > kola-run-upgrade.tar.xz
                    """)
                    archiveArtifacts "kola-run-upgrade.tar.xz"
                }
            }
        }
        if (!utils.checkKolaSuccess("tmp/kola", currentBuild) ||
            !utils.checkKolaSuccess("tmp/kola-upgrade", currentBuild)) {
                return
        }
    }}
}
